# Import libraries
import json
import pandas as pd
from pandas.io.json import json_normalize
import urllib.request
import urllib.parse
from datetime import datetime, timedelta
import time
import sqlalchemy
import warnings
# Ignore RuntimeWarning
warnings.simplefilter(action='ignore', category=RuntimeWarning)
# Set api strings
apiType = 'bulk_ranks'
siteId = '#Site ID'
#keywordId = '1'
rankType = 'highest'
apiBase = 'https://domain.getstat.com/api/v2/'
apiKey = '#API KEY'
apiUrl = apiBase + apiKey
# Set Database Connection
params = urllib.parse.quote_plus('params')
engine = sqlalchemy.create_engine('engine' % params)
# Dynamically Set Date Range
sql = 'select max(date) as max_date from Database Connection'
try:
    connection = engine.connect()
    result = connection.execute(sql)
except:
    print('1')
    quit()
for row in result:
    max_date = row['max_date']
start = datetime.strptime(max_date, '%Y-%m-%d').date() + timedelta(days=+1)
stop = datetime.now().date() + timedelta(days=-1)
# Define functions
def getResponse(url):
    with urllib.request.urlopen(url) as response:
        return json.loads(response.read())
def getResult(response):
    return response.get('Response').get('Result')
def getId(response):
    return response.get('Response').get('Result').get('Id')
def getNextPage(response):
    return response.get('Response').get('nextpage')
# Initiate bulk report & response loop
while start <= stop:  
    kwFinalResult2 = pd.DataFrame()
    requestDate = start.strftime('%Y-%m-%d')
    bulkRankRequest = '/bulk/ranks?date='+requestDate+'&site_id='+siteId+'&rank_type='+rankType+'&format=json'
    try:
        response = getResponse(apiUrl+bulkRankRequest)
        reportId = getId(response)
    except:
        print('2')
        quit()
    isCompleted = 'InProgress'
    i = 0  
    while isCompleted != 'Completed' and i <= 10:
        # Wait for report to complete
        j = 0
        while j < 4:
            time.sleep(3)
            j = j + 1
        # Call bulk report list
        bulkListResponse = getResponse(apiUrl+'/bulk/list?format=json')
        bulkList = getResult(bulkListResponse)
        flatBulkList = json_normalize(bulkList)
        # Check report status & location    
        reportDetails = flatBulkList.loc[flatBulkList['Id'] == reportId].reset_index()
        isCompleted = reportDetails.at[0,'Status']    
        bulkResponseUrl = reportDetails.at[0,'StreamUrl']
        reportDate = reportDetails.at[0,'Date']
        i = i + 1
    if isCompleted == 'Completed':
        bulkRanksResponse = getResponse(bulkResponseUrl)
        all_result = bulkRanksResponse.get('Response').get('Project')
        for result in all_result:
            domain = result.get('Name').replace('www.','')
            result = result.get('Site').get('Keyword')
            if result:
                #### Prepare Keyword Data for Table ####
                kwBase = pd.DataFrame(result, columns=['CreatedAt', 'Id', 'Keyword', 'KeywordCategories', 'KeywordDevice', 'KeywordLocation', 'KeywordMarket',])
                kwBase.columns = ['Created', 'Id', 'Keyword', 'Categories', 'Device', 'Location', 'Market']
                kwBase['domain'] = domain
                # Separate Keyword Stats
                df = pd.DataFrame(result, columns=['KeywordStats'])
                df=df['KeywordStats'].apply(pd.Series)
                df=df.drop(df.columns[[3]], axis=1)
                kwBase = pd.concat([kwBase, df], axis=1)
                # Separate Rank Date
                df = pd.DataFrame(result, columns=['Ranking'])
                dfRank = df['Ranking'].apply(pd.Series)
                df = dfRank['date']
                kwBase = pd.concat([kwBase, df], axis=1)
                # Prepare Google Rank Data    
                dfGRank = dfRank['Google'].apply(pd.Series)
                dfGRank['Engine'] = 'Google'
                # Prepare Bing Rank Data
                dfBRank = dfRank['Bing'].apply(pd.Series)
                dfBRank['Engine'] = 'Bing'  
                # Combine Bing & Google Rank Data
                RankBase = pd.concat([dfGRank, dfBRank])
                # Join Keyword Data With Rank Data
                kwFinalResult = kwBase.join(RankBase)
                kwFinalResult2 = pd.concat([kwFinalResult2,kwFinalResult])
                
        # Insert Data Into Tables
        kwFinalResult2.to_sql('Insert database to house results', engine, schema='dbo', if_exists='append', index=False, chunksize=100)
        start = start + timedelta(days=+1)
    if isCompleted != 'Completed':
        print('3')
        quit()
print('0')
